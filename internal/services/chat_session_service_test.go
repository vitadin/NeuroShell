package services

import (
	"testing"

	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"

	"neuroshell/internal/context"
	"neuroshell/pkg/neurotypes"
)

func TestChatSessionService_GenerateDefaultSessionName(t *testing.T) {
	// Setup test environment
	ctx := context.New()
	ctx.SetTestMode(true)
	context.SetGlobalContext(ctx)

	// Create and initialize service
	service := NewChatSessionService()
	err := service.Initialize()
	require.NoError(t, err)

	// Test first auto-generated name
	name1 := service.GenerateDefaultSessionName()
	assert.Equal(t, "Session 1", name1)

	// Create a session with that name to make it unavailable
	_, err = service.CreateSession(name1, "test prompt", "")
	require.NoError(t, err)

	// Test second auto-generated name should be incremented
	name2 := service.GenerateDefaultSessionName()
	assert.Equal(t, "Session 2", name2)

	// Create that session too
	_, err = service.CreateSession(name2, "test prompt", "")
	require.NoError(t, err)

	// Test third auto-generated name
	name3 := service.GenerateDefaultSessionName()
	assert.Equal(t, "Session 3", name3)
}

func TestChatSessionService_GenerateDefaultSessionName_FallbackPatterns(t *testing.T) {
	// Setup test environment
	ctx := context.New()
	ctx.SetTestMode(true)
	context.SetGlobalContext(ctx)

	// Create and initialize service
	service := NewChatSessionService()
	err := service.Initialize()
	require.NoError(t, err)

	// Fill up Session 1-5 to test fallback to Chat pattern
	for i := 1; i <= 5; i++ {
		sessionName := "Session " + string(rune('0'+i))
		_, err = service.CreateSession(sessionName, "test prompt", "")
		require.NoError(t, err)
	}

	// Should fall back to Chat pattern
	name := service.GenerateDefaultSessionName()

	// Should still find an available Session number or move to Chat pattern
	// Since we only created Session 1-5, Session 6 should be available
	assert.Equal(t, "Session 6", name)
}

func TestChatSessionService_GenerateDefaultSessionName_UninitializedService(t *testing.T) {
	// Test uninitialized service behavior
	service := NewChatSessionService()
	// Don't call Initialize()

	name := service.GenerateDefaultSessionName()
	assert.Equal(t, "Session 1", name)
}

func TestChatSessionService_GenerateDefaultSessionName_AllSessionPatternsTaken(t *testing.T) {
	// Setup test environment
	ctx := context.New()
	ctx.SetTestMode(true)
	context.SetGlobalContext(ctx)

	// Create and initialize service
	service := NewChatSessionService()
	err := service.Initialize()
	require.NoError(t, err)

	// Create sessions to test pattern progression
	// Take Session 1 and Session 2
	_, err = service.CreateSession("Session 1", "test", "")
	require.NoError(t, err)
	_, err = service.CreateSession("Session 2", "test", "")
	require.NoError(t, err)

	// Next should be Session 3
	name := service.GenerateDefaultSessionName()
	assert.Equal(t, "Session 3", name)

	// Take Chat 1 to test Chat fallback later
	_, err = service.CreateSession("Chat 1", "test", "")
	require.NoError(t, err)

	// Should still get Session 3 since we skipped it
	name = service.GenerateDefaultSessionName()
	assert.Equal(t, "Session 3", name)
}

func TestChatSessionService_CopySession_Basic(t *testing.T) {
	// Setup test environment
	ctx := context.New()
	ctx.SetTestMode(true)
	context.SetGlobalContext(ctx)

	// Create and initialize service
	service := NewChatSessionService()
	err := service.Initialize()
	require.NoError(t, err)

	// Create original session with messages
	originalSession, err := service.CreateSession("original_session", "You are a test assistant", "")
	require.NoError(t, err)

	// Add messages to original session
	err = service.AddMessage("original_session", "user", "Hello, test message!")
	require.NoError(t, err)
	err = service.AddMessage("original_session", "assistant", "Hello back!")
	require.NoError(t, err)

	// Copy session with custom target name
	copiedSession, err := service.CopySession("original_session", "copied_session")
	require.NoError(t, err)

	// Verify basic properties
	assert.NotEqual(t, originalSession.ID, copiedSession.ID)
	assert.Equal(t, "copied_session", copiedSession.Name)
	assert.Equal(t, originalSession.SystemPrompt, copiedSession.SystemPrompt)
	assert.Len(t, copiedSession.Messages, 2)

	// Verify messages were deep copied
	assert.Equal(t, originalSession.Messages[0].Role, copiedSession.Messages[0].Role)
	assert.Equal(t, originalSession.Messages[0].Content, copiedSession.Messages[0].Content)
	assert.Equal(t, originalSession.Messages[0].Timestamp, copiedSession.Messages[0].Timestamp)
	assert.NotEqual(t, originalSession.Messages[0].ID, copiedSession.Messages[0].ID) // New message IDs

	// Verify timestamps
	assert.NotEqual(t, originalSession.CreatedAt, copiedSession.CreatedAt)
	assert.NotEqual(t, originalSession.UpdatedAt, copiedSession.UpdatedAt)
}

func TestChatSessionService_CopySession_AutoGeneratedName(t *testing.T) {
	// Setup test environment
	ctx := context.New()
	ctx.SetTestMode(true)
	context.SetGlobalContext(ctx)

	// Create and initialize service
	service := NewChatSessionService()
	err := service.Initialize()
	require.NoError(t, err)

	// Create original session
	originalSession, err := service.CreateSession("source_session", "System prompt", "")
	require.NoError(t, err)

	// Copy session with auto-generated target name (empty string)
	copiedSession, err := service.CopySession("source_session", "")
	require.NoError(t, err)

	// Verify auto-generated name
	assert.NotEqual(t, originalSession.ID, copiedSession.ID)
	assert.NotEqual(t, originalSession.Name, copiedSession.Name)
	assert.Equal(t, "Session 1", copiedSession.Name) // Should be auto-generated
	assert.Equal(t, originalSession.SystemPrompt, copiedSession.SystemPrompt)
}

func TestChatSessionService_CopySession_ByID(t *testing.T) {
	// Setup test environment
	ctx := context.New()
	ctx.SetTestMode(true)
	context.SetGlobalContext(ctx)

	// Create and initialize service
	service := NewChatSessionService()
	err := service.Initialize()
	require.NoError(t, err)

	// Create original session
	originalSession, err := service.CreateSession("id_test_session", "Test system prompt", "")
	require.NoError(t, err)

	// Copy session by ID instead of name
	copiedSession, err := service.CopySession(originalSession.ID, "copied_by_id")
	require.NoError(t, err)

	// Verify copy was successful
	assert.NotEqual(t, originalSession.ID, copiedSession.ID)
	assert.Equal(t, "copied_by_id", copiedSession.Name)
	assert.Equal(t, originalSession.SystemPrompt, copiedSession.SystemPrompt)
}

func TestChatSessionService_CopySession_PrefixMatching(t *testing.T) {
	// Setup test environment
	ctx := context.New()
	ctx.SetTestMode(true)
	context.SetGlobalContext(ctx)

	// Create and initialize service
	service := NewChatSessionService()
	err := service.Initialize()
	require.NoError(t, err)

	// Create original session with specific name for prefix testing
	originalSession, err := service.CreateSession("project_alpha_main", "Prefix test prompt", "")
	require.NoError(t, err)

	// Copy session using prefix matching
	copiedSession, err := service.CopySession("project_alpha", "prefix_copy")
	require.NoError(t, err)

	// Verify it found the right session
	assert.Equal(t, originalSession.SystemPrompt, copiedSession.SystemPrompt)
	assert.Equal(t, "prefix_copy", copiedSession.Name)
	assert.NotEqual(t, originalSession.ID, copiedSession.ID)
}

func TestChatSessionService_CopySession_ErrorCases(t *testing.T) {
	// Setup test environment
	ctx := context.New()
	ctx.SetTestMode(true)
	context.SetGlobalContext(ctx)

	// Create and initialize service
	service := NewChatSessionService()
	err := service.Initialize()
	require.NoError(t, err)

	// Test 1: Source session not found
	_, err = service.CopySession("nonexistent_session", "target")
	assert.Error(t, err)
	assert.Contains(t, err.Error(), "source session lookup failed")

	// Test 2: Invalid target name
	_, err = service.CreateSession("valid_source", "Test prompt", "")
	require.NoError(t, err)

	_, err = service.CopySession("valid_source", "invalid\x00name")
	assert.Error(t, err)
	assert.Contains(t, err.Error(), "invalid target session name")

	// Test 3: Target name already in use
	_, err = service.CreateSession("existing_target", "Another prompt", "")
	require.NoError(t, err)

	_, err = service.CopySession("valid_source", "existing_target")
	assert.Error(t, err)
	assert.Contains(t, err.Error(), "already in use")

	// Test 4: Empty source identifier
	_, err = service.CopySession("", "target")
	assert.Error(t, err)
	assert.Contains(t, err.Error(), "session identifier cannot be empty")
}

func TestChatSessionService_CopySession_DeepCopyVerification(t *testing.T) {
	// Setup test environment
	ctx := context.New()
	ctx.SetTestMode(true)
	context.SetGlobalContext(ctx)

	// Create and initialize service
	service := NewChatSessionService()
	err := service.Initialize()
	require.NoError(t, err)

	// Create original session with complex message history
	originalSession, err := service.CreateSession("deep_copy_test", "Complex test assistant", "")
	require.NoError(t, err)

	// Add multiple messages with different roles
	messages := []struct {
		role    string
		content string
	}{
		{"user", "First user message"},
		{"assistant", "First assistant response"},
		{"user", "Second user message with more details"},
		{"assistant", "Second assistant response with analysis"},
		{"user", "Final user question"},
		{"assistant", "Final comprehensive answer"},
	}

	for _, msg := range messages {
		err = service.AddMessage("deep_copy_test", msg.role, msg.content)
		require.NoError(t, err)
	}

	// Copy the session
	copiedSession, err := service.CopySession("deep_copy_test", "deep_copy_result")
	require.NoError(t, err)

	// Verify all messages were copied correctly
	require.Len(t, copiedSession.Messages, len(messages))
	for i, expectedMsg := range messages {
		assert.Equal(t, expectedMsg.role, copiedSession.Messages[i].Role)
		assert.Equal(t, expectedMsg.content, copiedSession.Messages[i].Content)
		// Original timestamps should be preserved
		assert.Equal(t, originalSession.Messages[i].Timestamp, copiedSession.Messages[i].Timestamp)
		// But message IDs should be new
		assert.NotEqual(t, originalSession.Messages[i].ID, copiedSession.Messages[i].ID)
	}

	// Verify session metadata is preserved but identity is new
	assert.Equal(t, originalSession.SystemPrompt, copiedSession.SystemPrompt)
	assert.NotEqual(t, originalSession.ID, copiedSession.ID)
	assert.NotEqual(t, originalSession.Name, copiedSession.Name)
	assert.NotEqual(t, originalSession.CreatedAt, copiedSession.CreatedAt)
	assert.NotEqual(t, originalSession.UpdatedAt, copiedSession.UpdatedAt)
}

func TestChatSessionService_CopySession_EmptySession(t *testing.T) {
	// Setup test environment
	ctx := context.New()
	ctx.SetTestMode(true)
	context.SetGlobalContext(ctx)

	// Create and initialize service
	service := NewChatSessionService()
	err := service.Initialize()
	require.NoError(t, err)

	// Create original session with no messages
	originalSession, err := service.CreateSession("empty_session", "Empty session prompt", "")
	require.NoError(t, err)

	// Copy empty session
	copiedSession, err := service.CopySession("empty_session", "copied_empty")
	require.NoError(t, err)

	// Verify copy worked correctly for empty session
	assert.NotEqual(t, originalSession.ID, copiedSession.ID)
	assert.Equal(t, "copied_empty", copiedSession.Name)
	assert.Equal(t, originalSession.SystemPrompt, copiedSession.SystemPrompt)
	assert.Len(t, copiedSession.Messages, 0) // No messages
}

func TestChatSessionService_CopySession_NotInitialized(t *testing.T) {
	// Create service but don't initialize
	service := NewChatSessionService()

	// Attempt to copy session on uninitialized service
	_, err := service.CopySession("any_session", "target")
	assert.Error(t, err)
	assert.Contains(t, err.Error(), "chat session service not initialized")
}

func TestChatSessionService_CopySession_MultipleCopiesFromSameSource(t *testing.T) {
	// Setup test environment
	ctx := context.New()
	ctx.SetTestMode(true)
	context.SetGlobalContext(ctx)

	// Create and initialize service
	service := NewChatSessionService()
	err := service.Initialize()
	require.NoError(t, err)

	// Create original session
	originalSession, err := service.CreateSession("master_template", "Template prompt", "")
	require.NoError(t, err)

	// Add a message to make the test more realistic
	err = service.AddMessage("master_template", "user", "Template message")
	require.NoError(t, err)

	// Create multiple copies from the same source
	copy1, err := service.CopySession("master_template", "copy_1")
	require.NoError(t, err)

	copy2, err := service.CopySession("master_template", "copy_2")
	require.NoError(t, err)

	copy3, err := service.CopySession("master_template", "copy_3")
	require.NoError(t, err)

	// Verify all copies are independent and different
	copies := []*neurotypes.ChatSession{copy1, copy2, copy3}
	expectedNames := []string{"copy_1", "copy_2", "copy_3"}

	for i, copy := range copies {
		assert.NotEqual(t, originalSession.ID, copy.ID)
		assert.Equal(t, expectedNames[i], copy.Name)
		assert.Equal(t, originalSession.SystemPrompt, copy.SystemPrompt)
		assert.Len(t, copy.Messages, 1) // Should have the template message
		assert.Equal(t, "Template message", copy.Messages[0].Content)

		// Verify all copies have different IDs from each other
		for j, otherCopy := range copies {
			if i != j {
				assert.NotEqual(t, copy.ID, otherCopy.ID)
			}
		}
	}
}

func TestChatSessionService_EditMessage_Basic(t *testing.T) {
	// Setup test environment
	ctx := context.New()
	ctx.SetTestMode(true)
	context.SetGlobalContext(ctx)

	// Create and initialize service
	service := NewChatSessionService()
	err := service.Initialize()
	require.NoError(t, err)

	// Create session with messages
	session, err := service.CreateSession("edit_test", "Test assistant", "")
	require.NoError(t, err)

	// Add messages
	err = service.AddMessage("edit_test", "user", "First message")
	require.NoError(t, err)
	err = service.AddMessage("edit_test", "assistant", "Second message")
	require.NoError(t, err)
	err = service.AddMessage("edit_test", "user", "Third message")
	require.NoError(t, err)

	// Get original message details
	originalSession, err := service.GetSession(session.ID)
	require.NoError(t, err)
	originalMessage := originalSession.Messages[1] // Edit second message
	originalUpdateTime := originalSession.UpdatedAt

	// Edit the second message (index 1)
	err = service.EditMessage("edit_test", 1, "Edited second message")
	assert.NoError(t, err)

	// Verify the edit
	updatedSession, err := service.GetSession(session.ID)
	require.NoError(t, err)
	updatedMessage := updatedSession.Messages[1]

	// Content should be changed
	assert.Equal(t, "Edited second message", updatedMessage.Content)
	assert.NotEqual(t, originalMessage.Content, updatedMessage.Content)

	// Metadata should be preserved
	assert.Equal(t, originalMessage.ID, updatedMessage.ID)
	assert.Equal(t, originalMessage.Role, updatedMessage.Role)
	assert.Equal(t, originalMessage.Timestamp, updatedMessage.Timestamp)

	// Session UpdatedAt should be updated
	assert.True(t, updatedSession.UpdatedAt.After(originalUpdateTime))

	// Other messages should be unchanged
	assert.Equal(t, "First message", updatedSession.Messages[0].Content)
	assert.Equal(t, "Third message", updatedSession.Messages[2].Content)
}

func TestChatSessionService_EditMessage_ByID(t *testing.T) {
	// Setup test environment
	ctx := context.New()
	ctx.SetTestMode(true)
	context.SetGlobalContext(ctx)

	// Create and initialize service
	service := NewChatSessionService()
	err := service.Initialize()
	require.NoError(t, err)

	// Create session with message
	session, err := service.CreateSession("id_edit_test", "Test assistant", "")
	require.NoError(t, err)

	err = service.AddMessage("id_edit_test", "user", "Original message")
	require.NoError(t, err)

	// Edit by session ID instead of name
	err = service.EditMessage(session.ID, 0, "Edited by ID")
	assert.NoError(t, err)

	// Verify the edit
	updatedSession, err := service.GetSession(session.ID)
	require.NoError(t, err)
	assert.Equal(t, "Edited by ID", updatedSession.Messages[0].Content)
}

func TestChatSessionService_EditMessage_ErrorCases(t *testing.T) {
	// Setup test environment
	ctx := context.New()
	ctx.SetTestMode(true)
	context.SetGlobalContext(ctx)

	// Create and initialize service
	service := NewChatSessionService()
	err := service.Initialize()
	require.NoError(t, err)

	// Test 1: Service not initialized
	uninitializedService := &ChatSessionService{}
	err = uninitializedService.EditMessage("any_session", 0, "new content")
	assert.Error(t, err)
	assert.Contains(t, err.Error(), "chat session service not initialized")

	// Test 2: Session not found
	err = service.EditMessage("nonexistent_session", 0, "new content")
	assert.Error(t, err)
	assert.Contains(t, err.Error(), "no session found")

	// Test 3: Message index out of bounds
	_, err = service.CreateSession("bounds_test", "Test assistant", "")
	require.NoError(t, err)

	err = service.AddMessage("bounds_test", "user", "Only message")
	require.NoError(t, err)

	// Test negative index
	err = service.EditMessage("bounds_test", -1, "new content")
	assert.Error(t, err)
	assert.Contains(t, err.Error(), "out of bounds")

	// Test index too high
	err = service.EditMessage("bounds_test", 1, "new content")
	assert.Error(t, err)
	assert.Contains(t, err.Error(), "out of bounds")

	// Test 4: Empty session
	_, err = service.CreateSession("empty_test", "Test assistant", "")
	require.NoError(t, err)

	err = service.EditMessage("empty_test", 0, "new content")
	assert.Error(t, err)
	assert.Contains(t, err.Error(), "out of bounds")
}

func TestChatSessionService_EditMessage_BoundaryConditions(t *testing.T) {
	// Setup test environment
	ctx := context.New()
	ctx.SetTestMode(true)
	context.SetGlobalContext(ctx)

	// Create and initialize service
	service := NewChatSessionService()
	err := service.Initialize()
	require.NoError(t, err)

	// Create session with exactly one message
	session, err := service.CreateSession("single_message", "Test assistant", "")
	require.NoError(t, err)

	err = service.AddMessage("single_message", "user", "Only message")
	require.NoError(t, err)

	// Edit the only message (index 0)
	err = service.EditMessage("single_message", 0, "Edited only message")
	assert.NoError(t, err)

	// Verify the edit
	updatedSession, err := service.GetSession(session.ID)
	require.NoError(t, err)
	assert.Len(t, updatedSession.Messages, 1)
	assert.Equal(t, "Edited only message", updatedSession.Messages[0].Content)
}

func TestChatSessionService_EditMessage_WithContext(t *testing.T) {
	// Setup test environment
	ctx := context.New()
	ctx.SetTestMode(true)
	context.SetGlobalContext(ctx)

	// Create and initialize service
	service := NewChatSessionService()
	err := service.Initialize()
	require.NoError(t, err)

	// Create session with message
	session, err := service.CreateSession("context_test", "Test assistant", "")
	require.NoError(t, err)

	err = service.AddMessage("context_test", "user", "Original message")
	require.NoError(t, err)

	// Test EditMessageWithContext method directly
	err = service.EditMessageWithContext("context_test", 0, "Edited with context", ctx)
	assert.NoError(t, err)

	// Verify the edit
	updatedSession, err := service.GetSessionWithContext(session.ID, ctx)
	require.NoError(t, err)
	assert.Equal(t, "Edited with context", updatedSession.Messages[0].Content)
}

func TestChatSessionService_EditMessage_MultipleEdits(t *testing.T) {
	// Setup test environment
	ctx := context.New()
	ctx.SetTestMode(true)
	context.SetGlobalContext(ctx)

	// Create and initialize service
	service := NewChatSessionService()
	err := service.Initialize()
	require.NoError(t, err)

	// Create session with message
	session, err := service.CreateSession("multi_edit", "Test assistant", "")
	require.NoError(t, err)

	err = service.AddMessage("multi_edit", "user", "Original message")
	require.NoError(t, err)

	// Edit the same message multiple times
	edits := []string{
		"First edit",
		"Second edit",
		"Final edit",
	}

	for i, edit := range edits {
		err = service.EditMessage("multi_edit", 0, edit)
		assert.NoError(t, err, "Edit %d should succeed", i+1)

		// Verify each edit
		updatedSession, err := service.GetSession(session.ID)
		require.NoError(t, err)
		assert.Equal(t, edit, updatedSession.Messages[0].Content, "Edit %d content should match", i+1)
	}

	// Final verification
	finalSession, err := service.GetSession(session.ID)
	require.NoError(t, err)
	assert.Equal(t, "Final edit", finalSession.Messages[0].Content)
	assert.Len(t, finalSession.Messages, 1) // Still only one message
}

func TestChatSessionService_EditMessage_PrefixMatching(t *testing.T) {
	// Setup test environment
	ctx := context.New()
	ctx.SetTestMode(true)
	context.SetGlobalContext(ctx)

	// Create and initialize service
	service := NewChatSessionService()
	err := service.Initialize()
	require.NoError(t, err)

	// Create session with specific name for prefix testing
	session, err := service.CreateSession("prefix_edit_session_main", "Test assistant", "")
	require.NoError(t, err)

	err = service.AddMessage("prefix_edit_session_main", "user", "Original message")
	require.NoError(t, err)

	// Edit using prefix matching
	err = service.EditMessage("prefix_edit", 0, "Edited via prefix")
	assert.NoError(t, err)

	// Verify the edit worked
	updatedSession, err := service.GetSession(session.ID)
	require.NoError(t, err)
	assert.Equal(t, "Edited via prefix", updatedSession.Messages[0].Content)
}
