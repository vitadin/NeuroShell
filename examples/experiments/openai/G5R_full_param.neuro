%% OpenAI GPT-5 Responses Full Parameter Test
%% Purpose: Test G5R model with all available parameters from gpt-5-responses.yaml
%% This validates that all YAML parameter definitions are correctly implemented

\set _style dark1

\echo === OpenAI GPT-5 Responses Full Parameter Validation Test ===
\echo Testing G5R with all parameters: reasoning_effort, reasoning_summary, max_output_tokens
\echo

%% ============================================================================
%% API SETUP
%% ============================================================================
\echo Phase 1: Activating OpenAI API key from environment...

%% Load and activate the OpenAI API key from local environment
\llm-api-load[provider=openai]
\llm-api-activate[provider=openai, key=local.OPENAI_API_KEY]

%% Verify API key is activated
\llm-api-load[provider=openai]
\echo

%% ============================================================================
%% G5R FULL PARAMETER TEST
%% ============================================================================
\echo Phase 2: Testing G5R (GPT-5 Responses) with full parameter set...
\openai-model-new[catalog_id="G5R", reasoning_effort="medium", reasoning_summary="auto", max_output_tokens="50000"] gpt5-responses-full-params-model

%% Check that the G5R model was created successfully
\echo Step 2.1: Check G5R model creation with full parameters...
\model-status

%% Activate the G5R model for use
\echo Step 2.2: Activate G5R model for use...
\model-activate gpt5-responses-full-params-model

%% Verify the G5R model is active
\echo Step 2.3: Verify G5R model is active...
\echo Active model: ${#active_model_name}
\echo Provider: ${#active_model_provider}

%% G5R Progressive Session Context Test
\echo Step 2.4: Testing G5R session context with progressive conversation...
\echo This tests whether GPT-5 Responses receives and uses the full session context.
\echo

%% Message 1: Setup the scenario
\echo G5R Message 1: Setting up a coding problem...
\send I need to write a Python function. Let's call it "calculate_fibonacci". It should take a parameter n and return the nth Fibonacci number.

\echo-json ${_debug_network}

%% Message 2: Add constraint (requires context)
\echo G5R Message 2: Building on the function from Message 1...
\send Great! Now modify that function to also return the sequence leading up to the nth number as a list.

%% Message 3: Build on previous answer (requires context from both messages)
\echo G5R Message 3: Using the enhanced function we just created...
\send Now write a test function that validates both the nth number and the sequence length are correct for n=10.

%% Message 4: Memory test (tests session memory)
\echo G5R Message 4: Testing memory of original function name...
\send What was the original function name I specified at the very beginning of our conversation?

\echo-json ${_debug_network}

%% G5R test complete
\echo Step 2.5: G5R session context test complete. Checking session...
\session-list
\session-show

%% G5R cleanup
\echo Step 2.6: Cleanup - deleting the G5R test model...
\model-delete gpt5-responses-full-params-model
\model-status

\echo === GPT-5 Responses Full Parameter Test Complete ===
\echo All parameters successfully validated: reasoning_effort, reasoning_summary, max_output_tokens
