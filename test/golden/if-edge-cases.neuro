%% Edge cases and error conditions for \if command
%% Tests boundary conditions, malformed syntax, and error handling
\set[_echo_command="true"]

%% Test missing condition parameter (should cause error)
\try \if \echo "This should fail"
\get[_status]
\get[_error]

%% Test missing condition parameter with brackets (should cause error)  
\try \if[] \echo "This should also fail"
\get[_status]
\get[_error]

%% Test empty condition value (should be valid but falsy)
\if[condition=""] \echo "This should not appear - empty condition"

%% Test condition with only whitespace (should be falsy after trimming)
\if[condition="   "] \echo "This should not appear - whitespace condition"

%% Test very long condition string
\set[very_long="This is an extremely long condition string that goes on and on and contains many characters to test the limits of condition processing and ensure that very long strings are handled correctly by the if command implementation"]
\if[condition=${very_long}] \echo "Long condition worked: ${very_long}"

%% Test condition with special characters
\if[condition="special!@#$%^&*()"] \echo "Special characters in condition work"

%% Test condition with Unicode
\if[condition="ðŸŒŸâœ¨"] \echo "Unicode condition works: ðŸŒŸâœ¨"

%% Test condition with embedded newlines (using literal newline characters)
\set[multiline="line1\\nline2\\nline3"]
\if[condition=${multiline}] \echo "Multiline condition is truthy"

%% Test very long command
\if[condition=true] \echo "This is a very long command that tests whether the if statement can handle commands that are extremely verbose and contain lots of text to ensure proper queue handling with extensive content"

%% Test command with complex nesting and escaping
\set[complex_var="value with \"quotes\" and special chars"]
\if[condition=true] \set[result="${complex_var}"]
\get[result]

%% Test multiple conditions in sequence with mixed results
\if[condition=true] \set[test1="pass"]
\if[condition=false] \set[test2="fail"]
\if[condition=true] \set[test3="pass"]
\if[condition=false] \set[test4="fail"]
\get[test1]
\get[test2]
\get[test3] 
\get[test4]

%% Test condition parameter with unusual but valid values
\if[condition="null"] \echo "null string is truthy"
\if[condition="undefined"] \echo "undefined string is truthy"
\if[condition="NaN"] \echo "NaN string is truthy"

%% Test command with no action (empty command after condition)
\if[condition=true]
\if[condition=false]

%% Test with command that has syntax errors (should still queue)
\try \if[condition=true] \set[malformed]
\get[_status]
\get[_error]

%% Test simple variable interpolation in condition
\set[level1="true"] 
\if[condition=${level1}] \echo "Variable interpolation works"

%% Test condition with path-like strings
\if[condition="/usr/bin/test"] \echo "Path-like condition is truthy"
\if[condition="./relative/path"] \echo "Relative path condition is truthy"

%% Test condition with numbers as strings
\if[condition="123"] \echo "Numeric string 123 is truthy"
\if[condition="-456"] \echo "Negative numeric string is truthy"
\if[condition="0.0"] \echo "Zero decimal is truthy"

%% Test condition with boolean-like but not exact matches
\if[condition="True "] \echo "True with trailing space is truthy"
\if[condition=" false"] \echo "false with leading space should not appear"
\if[condition="TRUE!"] \echo "TRUE with exclamation is truthy"

%% Test that #if_result system variable works for edge cases
\if[condition="edge_case"] \set[dummy="test"]
\get[#if_result]

\if[condition=""] \set[dummy2="test"]
\get[#if_result]