%% UTF-8 character rendering test for variable interpolation
\set[_echo_command="true"]

%% Test basic UTF-8 interpolation
\set[cafe="café"]
\set[japanese="日本語"] 
\set[emoji="🚀"]
\echo Basic interpolation: ${cafe}, ${japanese}, ${emoji}

%% Test nested UTF-8 interpolation - this was the main bug we fixed
\set[outer="café"]
\set[café="🚀 rocket"]
\echo Nested UTF-8: ${${outer}}

%% Test complex nested interpolation with UTF-8
\set[prefix="utf8"]
\set[utf8_var="Testing: café with 日本語"]
\echo Complex nested: ${${prefix}_var}

%% Test multiple levels of UTF-8 nesting
\set[level1="level2"]
\set[level2="café_final"]
\set[café_final="Final UTF-8: 🚀 ✨ 日本語"]
\echo Multi-level nesting: ${${${level1}}}

%% Test UTF-8 in variable names and values
\set[naïve="résumé with 🌟"]
\set[résumé_key="naïve"]
\echo UTF-8 variable names: ${${résumé_key}}

%% Test interpolation with UTF-8 symbols and punctuation
\set[dash="—"]
\set[quotes=""Hello""]
\set[combined="${quotes} from café ${dash} amazing"]
\echo Symbol interpolation: ${combined}

%% Test UTF-8 interpolation in complex expressions
\set[greeting="Welcome to"]
\set[place="café naïve"]
\set[action="serving 🚀 coffee"]
\echo Complex: ${greeting} ${place} — ${action}

%% Test UTF-8 interpolation with mathematical symbols
\set[pi="π"]
\set[infinity="∞"]
\set[formula="Area = ${pi} × r² ≠ ${infinity}"]
\echo Math symbols: ${formula}

%% Test UTF-8 interpolation with currency
\set[euro="€"]
\set[yen="¥"]
\set[price="Coffee costs ${euro}5 or ${yen}600"]
\echo Currency: ${price}

%% Test empty and edge cases with UTF-8
\set[empty=""]
\set[café_empty="${empty}café${empty}"]
\echo Edge case: "${café_empty}"

%% Test that interpolation preserves UTF-8 in edge cases
\set[special="🚀${empty}café${empty}日本語"]
\echo Preserved UTF-8: ${special}

%% Test UTF-8 with system variables (that use numeric names)
\set[1="First: café"]
\set[2="Second: 日本語"]
\set[3="Third: 🚀"]
\echo System-like variables: ${1}, ${2}, ${3}

%% Test circular reference protection with UTF-8
\set[circular_a="café ${circular_b}"]
\set[circular_b="🚀 ${circular_a}"]
\echo Circular (should stop): ${circular_a}