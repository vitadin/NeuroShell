version: 2.1

# Define the executor for our jobs
executors:
  go-executor:
    docker:
      # Use official Go image matching go.mod version
      - image: cimg/go:1.24
    working_directory: ~/project

# Define our CI job
jobs:
  ci-pipeline:
    executor: go-executor
    steps:
      # Checkout the source code
      - checkout
      
      # Install dependencies: just and golangci-lint
      - run:
          name: Install build tools
          command: |
            # Install just using the recommended installation method
            curl --proto '=https' --tlsv1.2 -sSf https://just.systems/install.sh | bash -s -- --to ~/bin
            
            # Install golangci-lint
            curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b ~/bin
            
            # Update PATH
            echo 'export PATH="$HOME/bin:$PATH"' >> $BASH_ENV
            source $BASH_ENV
            
            # Verify installations
            just --version
            golangci-lint --version
      
      # Cache Go modules for faster builds
      - restore_cache:
          keys:
            - go-mod-{{ checksum "go.sum" }}
            - go-mod-
      
      # Run all CI checks step by step for better debugging
      - run:
          name: "Debug: Environment Info"
          command: |
            echo "=== Environment Debug Information ==="
            echo "Go version: $(go version)"
            echo "CPU cores: $(nproc)"
            echo "Available memory: $(free -h)"
            echo "Current directory: $(pwd)"
            echo "PATH: $PATH"
            echo "BASH_ENV: $BASH_ENV"
            source $BASH_ENV
            echo "Updated PATH: $PATH"
            echo "Just version: $(just --version)"
            echo "Golangci-lint version: $(golangci-lint --version)"
            echo "Go environment:"
            go env
            echo "=================================="

      - run:
          name: "CI Step 1: Update dependencies"
          command: |
            source $BASH_ENV
            just deps

      - run:
          name: "CI Step 2: Run all unit tests (with race detection)"
          command: |
            source $BASH_ENV
            echo "=== Running unit tests with race detection ==="
            echo "Test command: go test -v -race ./internal/services/... ./internal/testutils/... ./internal/commands/... ./internal/parser/... ./internal/context/... ./internal/shell/..."
            just test-all-units
          no_output_timeout: 10m

      - run:
          name: "CI Step 3: Build binary (includes lint + format)"
          command: |
            source $BASH_ENV
            just build

      - run:
          name: "CI Step 4: Run end-to-end tests"
          command: |
            source $BASH_ENV
            just test-e2e
          when: always
      
      # Save Go modules cache
      - save_cache:
          key: go-mod-{{ checksum "go.sum" }}
          paths:
            - ~/go/pkg/mod
      
      # Store test results and coverage reports as artifacts
      - store_artifacts:
          path: coverage.html
          destination: coverage-reports/coverage.html
      
      - store_artifacts:
          path: bin/
          destination: binaries/
      
      # Store any additional coverage files that might be generated
      - store_artifacts:
          path: "*-coverage.html"
          destination: coverage-reports/

# Define the workflow
workflows:
  version: 2
  ci:
    jobs:
      - ci-pipeline:
          filters:
            branches:
              # Run on all branches
              only: /.*/
            tags:
              # Run on all tags  
              only: /.*/
